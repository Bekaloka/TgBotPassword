
import os
import logging
import random
import string
import json
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

SETTINGS_FILE = Path("user_settings.json")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Callback Query ---
# –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏–∑-–∑–∞ –æ–ø–µ—á–∞—Ç–æ–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
LEN_INCR = "len_incr"
LEN_DECR = "len_decr"
LEN_INFO = "len_info"
TOGGLE_UPPER = "toggle_upper"
TOGGLE_LOWER = "toggle_lower"
TOGGLE_DIGITS = "toggle_digits"
TOGGLE_SYMBOLS = "toggle_symbols"
GENERATE = "generate"


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def load_user_settings() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    if not SETTINGS_FILE.exists():
        return {}
    try:
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ {SETTINGS_FILE}: {e}")
        return {}

def save_user_settings(settings: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª JSON."""
    try:
        with open(SETTINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(settings, f, indent=4, ensure_ascii=False)
    except IOError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {SETTINGS_FILE}: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è ---

def get_default_settings() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    return {
        "length": 16,
        "use_upper": True,
        "use_lower": True,
        "use_digits": True,
        "use_symbols": True,
    }

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
user_settings = load_user_settings()

def get_user_config(user_id: int) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞—è –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ JSON, –ø–æ—ç—Ç–æ–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º user_id
    user_id_str = str(user_id)
    if user_id_str not in user_settings:
        user_settings[user_id_str] = get_default_settings()
    return user_settings[user_id_str]


def generate_password(settings: dict) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—è –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    """
    length = settings["length"]
    character_pool = []
    guaranteed_chars = []

    if settings.get("use_lower", False):
        character_pool.extend(string.ascii_lowercase)
        guaranteed_chars.append(random.choice(string.ascii_lowercase))
    if settings.get("use_upper", False):
        character_pool.extend(string.ascii_uppercase)
        guaranteed_chars.append(random.choice(string.ascii_uppercase))
    if settings.get("use_digits", False):
        character_pool.extend(string.digits)
        guaranteed_chars.append(random.choice(string.digits))
    if settings.get("use_symbols", False):
        symbols = "!@#$%^&*()_+-=[]{}|;:,.<>"
        character_pool.extend(symbols)
        guaranteed_chars.append(random.choice(symbols))

    if not character_pool:
        return "–û—à–∏–±–∫–∞: –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤!"

    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ–º–∞—è –¥–ª–∏–Ω–∞ –º–µ–Ω—å—à–µ, —á–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤,
    # –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    if length < len(guaranteed_chars):
        random.shuffle(guaranteed_chars)
        return "".join(guaranteed_chars[:length])

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –ø–∞—Ä–æ–ª—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏–∑ –≤—Å–µ–≥–æ –ø—É–ª–∞
    remaining_length = length - len(guaranteed_chars)
    password_list = guaranteed_chars + [random.choice(character_pool) for _ in range(remaining_length)]

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ —Å—Ç–æ—è–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
    random.shuffle(password_list)

    return "".join(password_list)


async def build_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
    """–°—Ç—Ä–æ–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    config = get_user_config(update.effective_user.id)

    # –ò–∫–æ–Ω–∫–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    upper_icon = "‚úÖ" if config["use_upper"] else "‚ùå"
    lower_icon = "‚úÖ" if config["use_lower"] else "‚ùå"
    digits_icon = "‚úÖ" if config["use_digits"] else "‚ùå"
    symbols_icon = "‚úÖ" if config["use_symbols"] else "‚ùå"

    keyboard = [
        [
            InlineKeyboardButton("‚ûñ", callback_data=LEN_DECR),
            InlineKeyboardButton(f'–î–ª–∏–Ω–∞: {config["length"]}', callback_data=LEN_INFO),
            InlineKeyboardButton("‚ûï", callback_data=LEN_INCR),
        ],
        [
            InlineKeyboardButton(f"{upper_icon} –ó–∞–≥–ª–∞–≤–Ω—ã–µ", callback_data=TOGGLE_UPPER),
            InlineKeyboardButton(f"{lower_icon} –°—Ç—Ä–æ—á–Ω—ã–µ", callback_data=TOGGLE_LOWER),
        ],
        [
            InlineKeyboardButton(f"{digits_icon} –¶–∏—Ñ—Ä—ã", callback_data=TOGGLE_DIGITS),
            InlineKeyboardButton(f"{symbols_icon} –°–∏–º–≤–æ–ª—ã", callback_data=TOGGLE_SYMBOLS),
        ],
        [
            InlineKeyboardButton("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å üîë", callback_data=GENERATE),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message_text, reply_markup=reply_markup, parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            text=message_text, reply_markup=reply_markup, parse_mode='Markdown'
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    welcome_message = """
üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å.
"""
    await build_menu(update, context, welcome_message)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

    action = query.data
    user_id = query.from_user.id
    config = get_user_config(user_id)
    
    needs_update = True
    message = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã:*"

    if action == LEN_INCR:
        config["length"] = min(64, config["length"] + 1)
    elif action == LEN_DECR:
        config["length"] = max(4, config["length"] - 1)
    elif action == TOGGLE_UPPER:
        config["use_upper"] = not config["use_upper"]
    elif action == TOGGLE_LOWER:
        config["use_lower"] = not config["use_lower"]
    elif action == TOGGLE_DIGITS:
        config["use_digits"] = not config["use_digits"]
    elif action == TOGGLE_SYMBOLS:
        config["use_symbols"] = not config["use_symbols"]
    elif action == GENERATE:
        password = generate_password(config)
        await context.bot.send_message(
            chat_id=query.effective_chat.id,
            text=f"–í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:\n`{password}`\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.",
            parse_mode='Markdown'
        )
        message = "‚öôÔ∏è *–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–æ–ª—è:*"
    else:
        needs_update = False

    if needs_update:
        save_user_settings(user_settings) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫
        await build_menu(update, context, message)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    token = os.getenv("BOT_TOKEN")
    if not token:
        logger.critical("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        return

    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()


if __name__ == "__main__":
    main()
