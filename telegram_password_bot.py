
import os
import logging
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ö–ª—é—á: user_id, –ó–Ω–∞—á–µ–Ω–∏–µ: —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
user_settings = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è ---

def get_default_settings():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
    return {
        "length": 16,
        "use_upper": True,
        "use_lower": True,
        "use_digits": True,
        "use_symbols": True,
    }

def generate_password(settings: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    length = settings["length"]
    character_pool = []
    guaranteed_chars = []

    if settings["use_lower"]:
        character_pool.extend(string.ascii_lowercase)
        guaranteed_chars.append(random.choice(string.ascii_lowercase))
    if settings["use_upper"]:
        character_pool.extend(string.ascii_uppercase)
        guaranteed_chars.append(random.choice(string.ascii_uppercase))
    if settings["use_digits"]:
        character_pool.extend(string.digits)
        guaranteed_chars.append(random.choice(string.digits))
    if settings["use_symbols"]:
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
        symbols = "!@#$%^&*()_+-=[]{}|;:,.<>?"
        character_pool.extend(symbols)
        guaranteed_chars.append(random.choice(symbols))

    if not character_pool:
        return "–û—à–∏–±–∫–∞: –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤!"

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –ø–∞—Ä–æ–ª—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –∏–∑ –≤—Å–µ–≥–æ –ø—É–ª–∞
    remaining_length = length - len(guaranteed_chars)
    password_list = guaranteed_chars + [random.choice(character_pool) for _ in range(remaining_length)]

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–µ —Å—Ç–æ—è–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
    random.shuffle(password_list)

    return "".join(password_list)


async def build_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text: str):
    """–°—Ç—Ä–æ–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    if user_id not in user_settings:
        user_settings[user_id] = get_default_settings()

    s = user_settings[user_id]
    
    # ‚úÖ –∏–ª–∏ ‚ùå –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
    upper_icon = "‚úÖ" if s["use_upper"] else "‚ùå"
    lower_icon = "‚úÖ" if s["use_lower"] else "‚ùå"
    digits_icon = "‚úÖ" if s["use_digits"] else "‚ùå"
    symbols_icon = "‚úÖ" if s["use_symbols"] else "‚ùå"

    keyboard = [
        [
            InlineKeyboardButton("‚ûñ", callback_data="len_decr"),
            InlineKeyboardButton(f"–î–ª–∏–Ω–∞: {s['length']}", callback_data="len_info"),
            InlineKeyboardButton("‚ûï", callback_data="len_incr"),
        ],
        [
            InlineKeyboardButton(f"{upper_icon} –ó–∞–≥–ª–∞–≤–Ω—ã–µ", callback_data="toggle_upper"),
            InlineKeyboardButton(f"{lower_icon} –°—Ç—Ä–æ—á–Ω—ã–µ", callback_data="toggle_lower"),
        ],
        [
            InlineKeyboardButton(f"{digits_icon} –¶–∏—Ñ—Ä—ã", callback_data="toggle_digits"),
            InlineKeyboardButton(f"{symbols_icon} –°–∏–º–≤–æ–ª—ã", callback_data="toggle_symbols"),
        ],
        [
            InlineKeyboardButton("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å üîë", callback_data="generate"),
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if update.callback_query:
        await update.callback_query.edit_message_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text=message_text, reply_markup=reply_markup, parse_mode='Markdown')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_message = (
        "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.*

"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å."
    )
    await build_menu(update, context, welcome_message)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –≤—Å–µ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

    user_id = query.from_user.id
    if user_id not in user_settings:
        user_settings[user_id] = get_default_settings()

    action = query.data
    settings = user_settings[user_id]

    if action == "len_incr":
        settings["length"] = min(64, settings["length"] + 1)
    elif action == "len_decr":
        settings["length"] = max(4, settings["length"] - 1)
    elif action == "toggle_upper":
        settings["use_upper"] = not settings["use_upper"]
    elif action == "toggle_lower":
        settings["use_lower"] = not settings["use_lower"]
    elif action == "toggle_digits":
        settings["use_digits"] = not settings["use_digits"]
    elif action == "toggle_symbols":
        settings["use_symbols"] = not settings["use_symbols"]
    elif action == "generate":
        password = generate_password(settings)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        await context.bot.send_message(
            chat_id=query.effective_chat.id,
            text=f"–í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:
`{password}`

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.",
            parse_mode='Markdown'
        )
        # –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        await build_menu(update, context, "‚öôÔ∏è *–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä–æ–ª—è:*")
        return # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –º–µ–Ω—é –¥–≤–∞–∂–¥—ã
    
    # –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é
    await build_menu(update, context, "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã:*")


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –í–∞–∂–Ω–æ! –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return

    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
